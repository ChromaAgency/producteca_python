name: CI/CD
on: 
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.13"]
        poetry-version: [ "1.7.1"]
        os: [ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Install deps
        run: poetry install
      - name: Fetch repo
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
        run: |
          git status
          git config --global user.name 'Git bot'
          git config --global user.email 'gitbot@users.noreply.github.com'
          git pull 
      - name: Bump version
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
        run: |
          poetry version patch
          VERSION=$(poetry version -s)
      - name: Push changes
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git status
          git commit -am "Version Bump"
          git push 
      - name: Run tests
        run: poetry run test
      - name: Run coverage report
        run: |
          poetry run get_coverage
          git status
      - name: Run build
        run: poetry build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Store the coverage xml
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
  coverage:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build 
    steps:
      - uses: actions/checkout@v4
      - name: Download coverage.xml
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
      - uses: qltysh/qlty-action/coverage@v1
        with:
          token: ${{secrets.QLTY_COVERAGE_TOKEN}}
          files: coverage.xml/coverage.xml
            
  publish-to-pypi:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/producteca  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1